#!/bin/bash

# Show serial and capacity for all drives
for i in /dev/sd?; do echo "$i "; smartctl -d ata -a  $i | egrep "Serial N|Capacity" || echo; done

# find which ata dev is mapped to a drive id (eg ata1 to sda)
{
for i in $(ls -a /dev/sd?); do 
  ata=$(basename $i)
  echo "drive ${ata} maps to $(readlink /sys/block/${ata})"
  smartctl -d ata -a $i | egrep 'Serial|Capacity|Model' || echo;
  echo
done
}


# rescan scsi bus for hotswap especially
# dont forget to unmount swap before pulling a drive
{
 for H in /sys/class/scsi_host/*; do
    echo -n "rescanning $H... " && echo "- - -" > $H/scan && echo "OK" || echo "FAILED"
 done
} 

# disable ncq, may help performance in some cases
# https://ata.wiki.kernel.org/index.php/Libata_FAQ#Enabling.2C_disabling_and_checking_NCQ
for i in sd[abc]
do
  echo 1 > /sys/block/$i/device/queue_depth
done


# deletes drives, make sure drive is completly unsed first
echo 1 > /sys/block/$DISK/device/delete

# may also use this to spin a drive down.
echo offline > /sys/block/$DISK/device/state
 

# scan a drive for bad sectors and try to fix them? ymmv
# http://serverfault.com/questions/461203/how-to-use-hdparm-to-fix-a-pending-sector/641135#641135
{
baddrive=/dev/sdb
badsect=1
smartctl -t select,${badsect}-max ${baddrive} 2>&1 >> /dev/null
while true; do
  echo Testing from LBA $badsect

  echo "Waiting for test to stop (each dot is 5 sec)"
  while [ "$(smartctl -l selective ${baddrive} | awk '/^ *1/{print substr($4,1,9)}')" != "Completed" ]; do
    echo -n .
    sleep 5
  done
  echo

  badsect=$(smartctl -d ata -a ${baddrive} | awk '/# 1  Selective offline   Completed: read failure/ {print $10}')
  [ $badsect = "-" ] && exit 0

  echo Attempting to fix sector $badsect on $baddrive
  hdparm --read-sector ${badsect} $baddrive
  echo Continuning test

  smartctl -t select,next ${baddrive} 2>&1 >> /dev/null
done
}


# check mbr for grub
for i in /dev/sd?; do dd if=$i bs=512 count=1 2>&1 | strings | grep -qc GRUB && echo "$i GRUB present in mbr"; done


== What it is not...

MD is *not* a backup system, although some people leverage it's features for rotating off-site backup disks. Raid arrays are all about *uptime*. They will not save you from accidental deletion or other operator errors.  They will not save you if your office burns down.  You need a separate backup system for critical files.



== Choosing Drives, it really is this simple...

Buy Enterprise drives. They have appropriate error timeouts and work properly with MD right out of the box.

Or ... buy Desktop drives with SCTERC support. They have inappropriate default timeouts, but can be set to an appropriate value. Udev or boot script assistance is needed to call smartctl to set it. They do *not* work properly with MD out of the box.

Or ... suffer with desktop drives without SCTERC support. They cannot be set to appropriate error timeouts. Udev or boot script assistance is needed to set a 120 second driver timeout in sysfs. They do *not* work properly with MD out of the box.

Or... lose your data during spare rebuild after your first URE. (Odds in proportion to array size.)

Phil Turmel, 2013-01-13 22:13:44
http://marc.info/?l=linux-raid&m=135811522817345&w=1



# improve small caches
function tweak_disk_scheduler () {
  echo "  Setting ideal kernel scheduler by drive type"
  local i
  for i in /dev/sd?; do
    if [ "$(smartctl -d ata -a $i | grep -c 'SSD')" -ne "0" ]; then
      echo "  - ${i##*/} seems to be an ssd, using deadline"
      echo deadline > /sys/block/${i##*/}/queue/scheduler
    else
      echo "  - ${i##*/} is probably a spindle drive, defaulting to cfq"
      echo cfq > /sys/block/${i##*/}/queue/scheduler
    fi
  done
}


# Tune timeouts...
# Phil Turmel, Wed, 4 Nov 2015 08:13:06 -0
# http://www.spinics.net/lists/raid/msg50295.html
function tweak_timeouts() {
  # This iterates through all sata drives, whether raid or not.
  for i in /dev/sd? ; do
    if smartctl -l scterc,70,70 $i > /dev/null ; then
      echo -n $i " is good "
      # "Good" clearly means the device has ERC support 
      # and the default timeout is OK
    else
      echo 180 > /sys/block/${i/\/dev\/}/device/timeout
      echo -n $i " is  bad "
      # "Bad" means it doesn't support ERC, so the timeout is 
      # set to the work-around 180 seconds. That's the best you
      # can do for such drives
    fi;
    smartctl -i $i | egrep "(Device Model|Product:)"
  done
}

# for an md, use a multiple of the disk ra. ideally about 4 times. cater to 4k drives
function tweak_read_ahead () {
  echo "  Setting disk and md block read ahead size for consistency..."
  local i
  for i in /dev/sd?; do
    echo -n "  - $i was $(blockdev --getra $i), now "
    blockdev --setra 4096 $i
    blockdev --getra $i
  done
  for i in /dev/md?; do
    echo -n "  - $i was $(blockdev --getra $i), now "
    blockdev --setra 16384 $i
    blockdev --getra $i
  done
}

# Tweak stripe cache on raid6 arrays, speeds up things significantly, at the
# expense of some RAM
#  stripe_cache_size * block some * number of disks
#  = 16384 * 4k * 4 (active disks) = 256MB of RAM
# Avoid setting to high on hosts that have limited memory, but still do better 
# than default. We typically only have one raid6 per server, this might be a 
# bit of a hog else
function tweak_raid6 () {
  echo "  Setting raid6 array stripe caches, for better performance"
  local rnew=16384
  local rsize=0
  local i
  local memtot=$(free -ob | awk '/^Mem:/ {print $2}')

  if [ ${memtot} -lt 1000000000 ]; then
    rnew=2048
  elif [ ${memtot} -lt 2000000000 ]; then
    rnew=8192
  fi
  for i in $(grep active /proc/mdstat | awk '/raid6/ {print $1}'); do 
    rsize=$(cat /sys/block/${i}/md/stripe_cache_size)
    if [ ${rsize} -lt ${rnew} ]; then continue; fi
    echo ${rnew} > /sys/block/${i}/md/stripe_cache_size
    echo "  - ${i} : was ${rsize}, now $(cat /sys/block/${i}/md/stripe_cache_size)"
  done
}


#set read ahead for all sata and md devices to match
xm sched-credit -d0 -w512
for i in /dev/md? /dev/sd?; do blockdev --setra 4096 $i; done
for i in /dev/md? /dev/sd?; do blockdev --getra $i; done


# speed test 
echo 3 > /proc/sys/vm/drop_caches; for i in 1 2 3 4 5; do dd if=/dev/zero of=speedtest bs=1M count=1024 conv=fsync; done 2>&1 | awk '/copied/ {sum+=$8} END {print "average = "sum/5}'

# write ones instead  of zeros to a file
{
counts="350"
bsize="1M"
tr '\000' '\377' < /dev/zero | dd iflag=fullblock of=myfiledev bs="${bsize}" count="${counts}"
}


lvcreate --snapshot --name ${snapshot} ${lv} --size ${snapshot_size}b



